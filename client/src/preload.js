import { ipcRenderer, contextBridge } from 'electron'
contextBridge.exposeInMainWorld('mainAPI', {
    loginSucceeded: async (session) => await ipcRenderer.invoke('login-succeeded', session),
    onGetCurrentUser: (callback) => ipcRenderer.on('get-current-user', callback),
    onGoTo: (callback) => ipcRenderer.on('go-to', (_event, routePath) => callback(routePath)), 
    getRestBreathingDays: async (stage) => await ipcRenderer.invoke('get-rest-breathing-days', stage),
    getPacedBreathingDays: async (stage) => await ipcRenderer.invoke('get-paced-breathing-days', stage),
    getSegmentsAfterDate: async (date, stage) => await ipcRenderer.invoke('get-segments-after-date', date, stage),
    setStage: (stage) => ipcRenderer.invoke('set-stage', stage),
    showLoginWindow: () => ipcRenderer.send('show-login-window'),
    isStageComplete: async (stage) => await ipcRenderer.invoke('is-stage-complete', stage),
    pacerRegimeChanged: async (startTime, regime) => await ipcRenderer.invoke('pacer-regime-changed', startTime, regime),
    regimesForSession: async(condition, stage) => await ipcRenderer.invoke('regimes-for-session', condition, stage),
    uploadEmWaveData: async(session) => ipcRenderer.invoke('upload-emwave-data', session),
    uploadBreathData: async(session) => ipcRenderer.invoke('upload-breath-data', session),
    startPulseSensor: () => ipcRenderer.send('pulse-start'),
    stopPulseSensor: () => ipcRenderer.send('pulse-stop'),
    handleEmWaveIBIEvent: (callback) => ipcRenderer.on('emwave-ibi', callback),
    handleEmWaveStatusEvent: (callback) => ipcRenderer.on('emwave-status', callback),
    extractEmWaveSessionData: async (sinceDateTime, includeLiveIBI) => await ipcRenderer.invoke('emwave-extract-sessions', sinceDateTime, includeLiveIBI),
    getEmWaveSessionData: async (sessionIds) => await ipcRenderer.invoke('get-emwave-session-data', sessionIds),
    saveEmWaveSessionData: (emWaveSessionId, avgCoherence, pulseStartTime, validStatus, durationSec, stage, emoPic) => ipcRenderer.invoke('save-emwave-session', emWaveSessionId, avgCoherence, pulseStartTime, validStatus, durationSec, stage, emoPic),
    getEmWaveSessionsForStage: async (stage) => await ipcRenderer.invoke('get-emwave-sessions-for-stage', stage),
    getEmWaveSessionMinutesForDayAndStage: async(date, stage) => await ipcRenderer.invoke('get-emwave-session-minutes-for-day-and-stage', date, stage),
    getNextEmoPic: async () => await ipcRenderer.invoke('get-next-emo-pic'),
    getKeyValue: async (key) => await ipcRenderer.invoke('get-key-value', key),
    setKeyValue: (key, value) => ipcRenderer.send('set-key-value', key, value),
    disableMenus: async () => ipcRenderer.invoke('disable-menus'),
    quit: () => ipcRenderer.invoke('quit'),
})
